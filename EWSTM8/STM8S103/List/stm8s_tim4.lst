###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 17/Jan/2020  20:56:11
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  
#        H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_tim4.c
#    Command line =  
#        -f C:\Users\chuti\AppData\Local\Temp\EW250C.tmp
#        (H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_tim4.c
#        -e -On --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model medium --data_model medium -o
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj
#        --dlib_config E:\CaiPhanMem\IAR-STM8\stm8\LIB\dlstm8mmn.h -D STM8S003
#        -lcN H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List
#        -I H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\ -I
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\
#        --vregs 16)
#    Locale       =  English_USA.1252
#    List file    =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List\stm8s_tim4.lst
#    Object file  =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj\stm8s_tim4.o
#
###############################################################################

H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_tim4.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_tim4.c
      4            * @author  MCD Application Team
      5            * @version V2.2.0
      6            * @date    30-September-2014
      7            * @brief   This file contains all the functions for the TIM4 peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_tim4.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /**
     40            * @addtogroup TIM4_Public_Functions
     41            * @{
     42            */
     43          
     44          /**
     45            * @brief  Deinitializes the TIM4 peripheral registers to their default reset values.
     46            * @param  None
     47            * @retval None
     48            */
     49          void TIM4_DeInit(void)
     50          {
     51            TIM4->CR1 = TIM4_CR1_RESET_VALUE;
     52            TIM4->IER = TIM4_IER_RESET_VALUE;
     53            TIM4->CNTR = TIM4_CNTR_RESET_VALUE;
     54            TIM4->PSCR = TIM4_PSCR_RESET_VALUE;
     55            TIM4->ARR = TIM4_ARR_RESET_VALUE;
     56            TIM4->SR1 = TIM4_SR1_RESET_VALUE;
     57          }
     58          
     59          /**
     60            * @brief  Initializes the TIM4 Time Base Unit according to the specified parameters.
     61            * @param    TIM4_Prescaler specifies the Prescaler from TIM4_Prescaler_TypeDef.
     62            * @param    TIM4_Period specifies the Period value.
     63            * @retval None
     64            */
     65          void TIM4_TimeBaseInit(TIM4_Prescaler_TypeDef TIM4_Prescaler, uint8_t TIM4_Period)
     66          {
     67            /* Check TIM4 prescaler value */
     68            assert_param(IS_TIM4_PRESCALER_OK(TIM4_Prescaler));
     69            /* Set the Prescaler value */
     70            TIM4->PSCR = (uint8_t)(TIM4_Prescaler);
     71            /* Set the Autoreload value */
     72            TIM4->ARR = (uint8_t)(TIM4_Period);
     73          }
     74          
     75          /**
     76            * @brief  Enables or disables the TIM4 peripheral.
     77            * @param   NewState new state of the TIM4 peripheral. This parameter can
     78            * be ENABLE or DISABLE.
     79            * @retval None
     80            */
     81          void TIM4_Cmd(FunctionalState NewState)
     82          {
     83            /* Check the parameters */
     84            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
     85            
     86            /* set or Reset the CEN Bit */
     87            if (NewState != DISABLE)
     88            {
     89              TIM4->CR1 |= TIM4_CR1_CEN;
     90            }
     91            else
     92            {
     93              TIM4->CR1 &= (uint8_t)(~TIM4_CR1_CEN);
     94            }
     95          }
     96          
     97          /**
     98            * @brief  Enables or disables the specified TIM4 interrupts.
     99            * @param   NewState new state of the TIM4 peripheral.
    100            * This parameter can be: ENABLE or DISABLE.
    101            * @param   TIM4_IT specifies the TIM4 interrupts sources to be enabled or disabled.
    102            * This parameter can be any combination of the following values:
    103            * - TIM4_IT_UPDATE: TIM4 update Interrupt source
    104            * @param   NewState new state of the TIM4 peripheral.
    105            * @retval None
    106            */
    107          void TIM4_ITConfig(TIM4_IT_TypeDef TIM4_IT, FunctionalState NewState)
    108          {
    109            /* Check the parameters */
    110            assert_param(IS_TIM4_IT_OK(TIM4_IT));
    111            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    112            
    113            if (NewState != DISABLE)
    114            {
    115              /* Enable the Interrupt sources */
    116              TIM4->IER |= (uint8_t)TIM4_IT;
    117            }
    118            else
    119            {
    120              /* Disable the Interrupt sources */
    121              TIM4->IER &= (uint8_t)(~TIM4_IT);
    122            }
    123          }
    124          
    125          /**
    126            * @brief  Enables or Disables the TIM4 Update event.
    127            * @param   NewState new state of the TIM4 peripheral Preload register. This parameter can
    128            * be ENABLE or DISABLE.
    129            * @retval None
    130            */
    131          void TIM4_UpdateDisableConfig(FunctionalState NewState)
    132          {
    133            /* Check the parameters */
    134            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    135            
    136            /* Set or Reset the UDIS Bit */
    137            if (NewState != DISABLE)
    138            {
    139              TIM4->CR1 |= TIM4_CR1_UDIS;
    140            }
    141            else
    142            {
    143              TIM4->CR1 &= (uint8_t)(~TIM4_CR1_UDIS);
    144            }
    145          }
    146          
    147          /**
    148            * @brief  Selects the TIM4 Update Request Interrupt source.
    149            * @param   TIM4_UpdateSource specifies the Update source.
    150            * This parameter can be one of the following values
    151            *                       - TIM4_UPDATESOURCE_REGULAR
    152            *                       - TIM4_UPDATESOURCE_GLOBAL
    153            * @retval None
    154            */
    155          void TIM4_UpdateRequestConfig(TIM4_UpdateSource_TypeDef TIM4_UpdateSource)
    156          {
    157            /* Check the parameters */
    158            assert_param(IS_TIM4_UPDATE_SOURCE_OK(TIM4_UpdateSource));
    159            
    160            /* Set or Reset the URS Bit */
    161            if (TIM4_UpdateSource != TIM4_UPDATESOURCE_GLOBAL)
    162            {
    163              TIM4->CR1 |= TIM4_CR1_URS;
    164            }
    165            else
    166            {
    167              TIM4->CR1 &= (uint8_t)(~TIM4_CR1_URS);
    168            }
    169          }
    170          
    171          /**
    172            * @brief  Selects the TIM4’s One Pulse Mode.
    173            * @param   TIM4_OPMode specifies the OPM Mode to be used.
    174            * This parameter can be one of the following values
    175            *                    - TIM4_OPMODE_SINGLE
    176            *                    - TIM4_OPMODE_REPETITIVE
    177            * @retval None
    178            */
    179          void TIM4_SelectOnePulseMode(TIM4_OPMode_TypeDef TIM4_OPMode)
    180          {
    181            /* Check the parameters */
    182            assert_param(IS_TIM4_OPM_MODE_OK(TIM4_OPMode));
    183            
    184            /* Set or Reset the OPM Bit */
    185            if (TIM4_OPMode != TIM4_OPMODE_REPETITIVE)
    186            {
    187              TIM4->CR1 |= TIM4_CR1_OPM;
    188            }
    189            else
    190            {
    191              TIM4->CR1 &= (uint8_t)(~TIM4_CR1_OPM);
    192            }
    193          }
    194          
    195          /**
    196            * @brief  Configures the TIM4 Prescaler.
    197            * @param   Prescaler specifies the Prescaler Register value
    198            * This parameter can be one of the following values
    199            *                       -  TIM4_PRESCALER_1
    200            *                       -  TIM4_PRESCALER_2
    201            *                       -  TIM4_PRESCALER_4
    202            *                       -  TIM4_PRESCALER_8
    203            *                       -  TIM4_PRESCALER_16
    204            *                       -  TIM4_PRESCALER_32
    205            *                       -  TIM4_PRESCALER_64
    206            *                       -  TIM4_PRESCALER_128
    207            * @param   TIM4_PSCReloadMode specifies the TIM4 Prescaler Reload mode.
    208            * This parameter can be one of the following values
    209            *                       - TIM4_PSCRELOADMODE_IMMEDIATE: The Prescaler is loaded
    210            *                         immediately.
    211            *                       - TIM4_PSCRELOADMODE_UPDATE: The Prescaler is loaded at
    212            *                         the update event.
    213            * @retval None
    214            */
    215          void TIM4_PrescalerConfig(TIM4_Prescaler_TypeDef Prescaler, TIM4_PSCReloadMode_TypeDef TIM4_PSCReloadMode)
    216          {
    217            /* Check the parameters */
    218            assert_param(IS_TIM4_PRESCALER_RELOAD_OK(TIM4_PSCReloadMode));
    219            assert_param(IS_TIM4_PRESCALER_OK(Prescaler));
    220            
    221            /* Set the Prescaler value */
    222            TIM4->PSCR = (uint8_t)Prescaler;
    223            
    224            /* Set or reset the UG Bit */
    225            TIM4->EGR = (uint8_t)TIM4_PSCReloadMode;
    226          }
    227          
    228          /**
    229            * @brief  Enables or disables TIM4 peripheral Preload register on ARR.
    230            * @param   NewState new state of the TIM4 peripheral Preload register.
    231            * This parameter can be ENABLE or DISABLE.
    232            * @retval None
    233            */
    234          void TIM4_ARRPreloadConfig(FunctionalState NewState)
    235          {
    236            /* Check the parameters */
    237            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    238            
    239            /* Set or Reset the ARPE Bit */
    240            if (NewState != DISABLE)
    241            {
    242              TIM4->CR1 |= TIM4_CR1_ARPE;
    243            }
    244            else
    245            {
    246              TIM4->CR1 &= (uint8_t)(~TIM4_CR1_ARPE);
    247            }
    248          }
    249          
    250          /**
    251            * @brief  Configures the TIM4 event to be generated by software.
    252            * @param   TIM4_EventSource specifies the event source.
    253            * This parameter can be one of the following values:
    254            *                       - TIM4_EVENTSOURCE_UPDATE: TIM4 update Event source
    255            * @retval None
    256            */
    257          void TIM4_GenerateEvent(TIM4_EventSource_TypeDef TIM4_EventSource)
    258          {
    259            /* Check the parameters */
    260            assert_param(IS_TIM4_EVENT_SOURCE_OK(TIM4_EventSource));
    261            
    262            /* Set the event sources */
    263            TIM4->EGR = (uint8_t)(TIM4_EventSource);
    264          }
    265          
    266          /**
    267            * @brief  Sets the TIM4 Counter Register value.
    268            * @param   Counter specifies the Counter register new value.
    269            * This parameter is between 0x00 and 0xFF.
    270            * @retval None
    271            */
    272          void TIM4_SetCounter(uint8_t Counter)
    273          {
    274            /* Set the Counter Register value */
    275            TIM4->CNTR = (uint8_t)(Counter);
    276          }
    277          
    278          /**
    279            * @brief  Sets the TIM4 Autoreload Register value.
    280            * @param   Autoreload specifies the Autoreload register new value.
    281            * This parameter is between 0x00 and 0xFF.
    282            * @retval None
    283            */
    284          void TIM4_SetAutoreload(uint8_t Autoreload)
    285          {
    286            /* Set the Autoreload Register value */
    287            TIM4->ARR = (uint8_t)(Autoreload);
    288          }
    289          
    290          /**
    291            * @brief  Gets the TIM4 Counter value.
    292            * @param  None
    293            * @retval Counter Register value.
    294            */
    295          uint8_t TIM4_GetCounter(void)
    296          {
    297            /* Get the Counter Register value */
    298            return (uint8_t)(TIM4->CNTR);
    299          }
    300          
    301          /**
    302            * @brief  Gets the TIM4 Prescaler value.
    303            * @param  None
    304            * @retval Prescaler Register configuration value.
    305            */
    306          TIM4_Prescaler_TypeDef TIM4_GetPrescaler(void)
    307          {
    308            /* Get the Prescaler Register value */
    309            return (TIM4_Prescaler_TypeDef)(TIM4->PSCR);
    310          }
    311          
    312          /**
    313            * @brief  Checks whether the specified TIM4 flag is set or not.
    314            * @param   TIM4_FLAG specifies the flag to check.
    315            * This parameter can be one of the following values:
    316            *                       - TIM4_FLAG_UPDATE: TIM4 update Flag
    317            * @retval FlagStatus The new state of TIM4_FLAG (SET or RESET).
    318            */
    319          FlagStatus TIM4_GetFlagStatus(TIM4_FLAG_TypeDef TIM4_FLAG)
    320          {
    321            FlagStatus bitstatus = RESET;
    322            
    323            /* Check the parameters */
    324            assert_param(IS_TIM4_GET_FLAG_OK(TIM4_FLAG));
    325            
    326            if ((TIM4->SR1 & (uint8_t)TIM4_FLAG)  != 0)
    327            {
    328              bitstatus = SET;
    329            }
    330            else
    331            {
    332              bitstatus = RESET;
    333            }
    334            return ((FlagStatus)bitstatus);
    335          }
    336          
    337          /**
    338            * @brief  Clears the TIM4’s pending flags.
    339            * @param   TIM4_FLAG specifies the flag to clear.
    340            * This parameter can be one of the following values:
    341            *                       - TIM4_FLAG_UPDATE: TIM4 update Flag
    342            * @retval None.
    343            */
    344          void TIM4_ClearFlag(TIM4_FLAG_TypeDef TIM4_FLAG)
    345          {
    346            /* Check the parameters */
    347            assert_param(IS_TIM4_GET_FLAG_OK(TIM4_FLAG));
    348            
    349            /* Clear the flags (rc_w0) clear this bit by writing 0. Writing ‘1’ has no effect*/
    350            TIM4->SR1 = (uint8_t)(~TIM4_FLAG);
    351          }
    352          
    353          /**
    354            * @brief  Checks whether the TIM4 interrupt has occurred or not.
    355            * @param  TIM4_IT specifies the TIM4 interrupt source to check.
    356            * This parameter can be one of the following values:
    357            *                       - TIM4_IT_UPDATE: TIM4 update Interrupt source
    358            * @retval ITStatus The new state of the TIM4_IT (SET or RESET).
    359            */
    360          ITStatus TIM4_GetITStatus(TIM4_IT_TypeDef TIM4_IT)
    361          {
    362            ITStatus bitstatus = RESET;
    363            
    364            uint8_t itstatus = 0x0, itenable = 0x0;
    365            
    366            /* Check the parameters */
    367            assert_param(IS_TIM4_IT_OK(TIM4_IT));
    368            
    369            itstatus = (uint8_t)(TIM4->SR1 & (uint8_t)TIM4_IT);
    370            
    371            itenable = (uint8_t)(TIM4->IER & (uint8_t)TIM4_IT);
    372            
    373            if ((itstatus != (uint8_t)RESET ) && (itenable != (uint8_t)RESET ))
    374            {
    375              bitstatus = (ITStatus)SET;
    376            }
    377            else
    378            {
    379              bitstatus = (ITStatus)RESET;
    380            }
    381            return ((ITStatus)bitstatus);
    382          }
    383          
    384          /**
    385            * @brief Clears the TIM4's interrupt pending bits.
    386            * @param TIM4_IT specifies the pending bit to clear.
    387            * This parameter can be one of the following values:
    388            *                       - TIM4_IT_UPDATE: TIM4 update Interrupt source
    389            * @retval None.
    390            */
    391          void TIM4_ClearITPendingBit(TIM4_IT_TypeDef TIM4_IT)
    392          {
    393            /* Check the parameters */
    394            assert_param(IS_TIM4_IT_OK(TIM4_IT));
    395            
    396            /* Clear the IT pending Bit */
    397            TIM4->SR1 = (uint8_t)(~TIM4_IT);
    398          }
    399          
    400          /**
    401            * @}
    402            */
    403            
    404            /**
    405            * @}
    406            */
    407            
    408          
    409          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      75  ?_0
      48  TIM4_ARRPreloadConfig
      36  TIM4_ClearFlag
      36  TIM4_ClearITPendingBit
      48  TIM4_Cmd
      25  TIM4_DeInit
      35  TIM4_GenerateEvent
       4  TIM4_GetCounter
      52  TIM4_GetFlagStatus
      69  TIM4_GetITStatus
       4  TIM4_GetPrescaler
      82  TIM4_ITConfig
     109  TIM4_PrescalerConfig
      48  TIM4_SelectOnePulseMode
       4  TIM4_SetAutoreload
       4  TIM4_SetCounter
      84  TIM4_TimeBaseInit
      48  TIM4_UpdateDisableConfig
      48  TIM4_UpdateRequestConfig

 
 784 bytes in section .far_func.text
  75 bytes in section .near.rodata
 
 784 bytes of CODE  memory
  75 bytes of CONST memory

Errors: none
Warnings: none
