###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 17/Jan/2020  20:56:10
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  
#        H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_gpio.c
#    Command line =  
#        -f C:\Users\chuti\AppData\Local\Temp\EW231E.tmp
#        (H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_gpio.c
#        -e -On --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model medium --data_model medium -o
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj
#        --dlib_config E:\CaiPhanMem\IAR-STM8\stm8\LIB\dlstm8mmn.h -D STM8S003
#        -lcN H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List
#        -I H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\ -I
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\
#        --vregs 16)
#    Locale       =  English_USA.1252
#    List file    =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List\stm8s_gpio.lst
#    Object file  =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj\stm8s_gpio.o
#
###############################################################################

H:\Project_For_AKS\STM8S\Libraries\STM8S_StdPeriph_Driver\src\stm8s_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_gpio.c
      4            * @author  MCD Application Team
      5            * @version V2.2.0
      6            * @date    30-September-2014
      7            * @brief   This file contains all the functions for the GPIO peripheral.
      8             ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm8s_gpio.h"
     30          
     31          /** @addtogroup STM8S_StdPeriph_Driver
     32            * @{
     33            */
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /* Public functions ----------------------------------------------------------*/
     42          
     43          /**
     44            * @addtogroup GPIO_Public_Functions
     45            * @{
     46            */
     47          
     48          /**
     49            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
     50            * @param  GPIOx: Select the GPIO peripheral number (x = A to I).
     51            * @retval None
     52            */
     53          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
     54          {
     55            GPIOx->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
     56            GPIOx->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
     57            GPIOx->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
     58            GPIOx->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
     59          }
     60          
     61          /**
     62            * @brief  Initializes the GPIOx according to the specified parameters.
     63            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
     64            * @param  GPIO_Pin : This parameter contains the pin number, it can be any value
     65            *         of the @ref GPIO_Pin_TypeDef enumeration.
     66            * @param  GPIO_Mode : This parameter can be a value of the
     67            *         @Ref GPIO_Mode_TypeDef enumeration.
     68            * @retval None
     69            */
     70          
     71          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, GPIO_Mode_TypeDef GPIO_Mode)
     72          {
     73            /*----------------------*/
     74            /* Check the parameters */
     75            /*----------------------*/
     76            
     77            assert_param(IS_GPIO_MODE_OK(GPIO_Mode));
     78            assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
     79            
     80            /* Reset corresponding bit to GPIO_Pin in CR2 register */
     81            GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
     82            
     83            /*-----------------------------*/
     84            /* Input/Output mode selection */
     85            /*-----------------------------*/
     86            
     87            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x80) != (uint8_t)0x00) /* Output mode */
     88            {
     89              if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x10) != (uint8_t)0x00) /* High level */
     90              {
     91                GPIOx->ODR |= (uint8_t)GPIO_Pin;
     92              } 
     93              else /* Low level */
     94              {
     95                GPIOx->ODR &= (uint8_t)(~(GPIO_Pin));
     96              }
     97              /* Set Output mode */
     98              GPIOx->DDR |= (uint8_t)GPIO_Pin;
     99            } 
    100            else /* Input mode */
    101            {
    102              /* Set Input mode */
    103              GPIOx->DDR &= (uint8_t)(~(GPIO_Pin));
    104            }
    105            
    106            /*------------------------------------------------------------------------*/
    107            /* Pull-Up/Float (Input) or Push-Pull/Open-Drain (Output) modes selection */
    108            /*------------------------------------------------------------------------*/
    109            
    110            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x40) != (uint8_t)0x00) /* Pull-Up or Push-Pull */
    111            {
    112              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
    113            } 
    114            else /* Float or Open-Drain */
    115            {
    116              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
    117            }
    118            
    119            /*-----------------------------------------------------*/
    120            /* Interrupt (Input) or Slope (Output) modes selection */
    121            /*-----------------------------------------------------*/
    122            
    123            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x20) != (uint8_t)0x00) /* Interrupt or Slow slope */
    124            {
    125              GPIOx->CR2 |= (uint8_t)GPIO_Pin;
    126            } 
    127            else /* No external interrupt or No slope control */
    128            {
    129              GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
    130            }
    131          }
    132          
    133          /**
    134            * @brief  Writes data to the specified GPIO data port.
    135            * @note   The port must be configured in output mode.
    136            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    137            * @param  GPIO_PortVal : Specifies the value to be written to the port output
    138            *         data register.
    139            * @retval None
    140            */
    141          void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t PortVal)
    142          {
    143            GPIOx->ODR = PortVal;
    144          }
    145          
    146          /**
    147            * @brief  Writes high level to the specified GPIO pins.
    148            * @note   The port must be configured in output mode.  
    149            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    150            * @param  PortPins : Specifies the pins to be turned high to the port output.
    151            *         data register.
    152            * @retval None
    153            */
    154          void GPIO_WriteHigh(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    155          {
    156            GPIOx->ODR |= (uint8_t)PortPins;
    157          }
    158          
    159          /**
    160            * @brief  Writes low level to the specified GPIO pins.
    161            * @note   The port must be configured in output mode.  
    162            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    163            * @param  PortPins : Specifies the pins to be turned low to the port output.
    164            *         data register.
    165            * @retval None
    166            */
    167          void GPIO_WriteLow(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    168          {
    169            GPIOx->ODR &= (uint8_t)(~PortPins);
    170          }
    171          
    172          /**
    173            * @brief  Writes reverse level to the specified GPIO pins.
    174            * @note   The port must be configured in output mode.
    175            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    176            * @param  PortPins : Specifies the pins to be reversed to the port output.
    177            *         data register.
    178            * @retval None
    179            */
    180          void GPIO_WriteReverse(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef PortPins)
    181          {
    182            GPIOx->ODR ^= (uint8_t)PortPins;
    183          }
    184          
    185          /**
    186            * @brief  Reads the specified GPIO output data port.
    187            * @note   The port must be configured in input mode.  
    188            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    189            * @retval GPIO output data port value.
    190            */
    191          uint8_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    192          {
    193            return ((uint8_t)GPIOx->ODR);
    194          }
    195          
    196          /**
    197            * @brief  Reads the specified GPIO input data port.
    198            * @note   The port must be configured in input mode.   
    199            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    200            * @retval GPIO input data port value.
    201            */
    202          uint8_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    203          {
    204            return ((uint8_t)GPIOx->IDR);
    205          }
    206          
    207          /**
    208            * @brief  Reads the specified GPIO input data pin.
    209            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    210            * @param  GPIO_Pin : Specifies the pin number.
    211            * @retval BitStatus : GPIO input pin status.
    212            */
    213          BitStatus GPIO_ReadInputPin(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
    214          {
    215            return ((BitStatus)(GPIOx->IDR & (uint8_t)GPIO_Pin));
    216          }
    217          
    218          /**
    219            * @brief  Configures the external pull-up on GPIOx pins.
    220            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    221            * @param  GPIO_Pin : Specifies the pin number
    222            * @param  NewState : The new state of the pull up pin.
    223            * @retval None
    224            */
    225          void GPIO_ExternalPullUpConfig(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, FunctionalState NewState)
    226          {
    227            /* Check the parameters */
    228            assert_param(IS_GPIO_PIN_OK(GPIO_Pin));
    229            assert_param(IS_FUNCTIONALSTATE_OK(NewState));
    230            
    231            if (NewState != DISABLE) /* External Pull-Up Set*/
    232            {
    233              GPIOx->CR1 |= (uint8_t)GPIO_Pin;
    234            } else /* External Pull-Up Reset*/
    235            {
    236              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
    237            }
    238          }
    239          
    240          /**
    241            * @}
    242            */
    243            
    244          /**
    245            * @}
    246            */
    247            
    248          
    249          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      75  ?_0
      19  GPIO_DeInit
      94  GPIO_ExternalPullUpConfig
     274  GPIO_Init
       3  GPIO_ReadInputData
       7  GPIO_ReadInputPin
       2  GPIO_ReadOutputData
       2  GPIO_Write
       7  GPIO_WriteHigh
       8  GPIO_WriteLow
       7  GPIO_WriteReverse

 
 423 bytes in section .far_func.text
  75 bytes in section .near.rodata
 
 423 bytes of CODE  memory
  75 bytes of CONST memory

Errors: none
Warnings: none
