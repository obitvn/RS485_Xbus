###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 17/Jan/2020  20:56:10
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  H:\Project_For_AKS\STM8S\Project\RS485_Xbus\delay.c
#    Command line =  
#        -f C:\Users\chuti\AppData\Local\Temp\EW2037.tmp
#        (H:\Project_For_AKS\STM8S\Project\RS485_Xbus\delay.c -e -On --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_cross_call
#        --debug --code_model medium --data_model medium -o
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj
#        --dlib_config E:\CaiPhanMem\IAR-STM8\stm8\LIB\dlstm8mmn.h -D STM8S003
#        -lcN H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List
#        -I H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\ -I
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\
#        --vregs 16)
#    Locale       =  English_USA.1252
#    List file    =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\List\delay.lst
#    Object file  =  
#        H:\Project_For_AKS\STM8S\Project\RS485_Xbus\EWSTM8\STM8S103\Obj\delay.o
#
###############################################################################

H:\Project_For_AKS\STM8S\Project\RS485_Xbus\delay.c
      1          #include "stm8s.h"
      2          #include "delay.h"
      3          #include "uart.h"
      4          
      5          
      6          
      7          
      8          void clk_config_16MHz_hsi(void)
      9          {       
     10                  /*
     11          	CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1); 
     12                  CLK_DeInit();
     13          	CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
     14                  CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);
     15          	CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSI, DISABLE, CLK_CURRENTCLOCKSTATE_DISABLE);
     16                  while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY)!=SET);
     17                    */
     18                  CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
     19          }
     20          
     21          void delay_using_timer1_init(void)
     22          {
     23                 /*
     24                  TIM1_DeInit();
     25          	TIM1_TimeBaseInit(16, TIM1_COUNTERMODE_UP,59999, 1);
     26                  TIM1_ARRPreloadConfig(ENABLE);
     27          	TIM1_ITConfig(TIM1_IT_UPDATE,DISABLE);
     28                  TIM1_ClearFlag(TIM1_FLAG_UPDATE);
     29                  TIM1_SetCounter(0);
     30          	TIM1_Cmd(ENABLE);  
     31                  enableInterrupts();
     32                  */
     33          }
     34          
     35          void delay_isr(void)
     36          {         
     37                    nop();
     38                    //time_keeper = time_keeper + 60000;	
     39          	  //TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
     40          }
     41          
     42          uint32_t GetMicroTick()
     43          {
     44          	//return time_keeper + TIM1_GetCounter();
     45                    return 1;
     46          }
     47          
     48          void delay_us(uint32_t time)
     49          {
     50            /*
     51          	uint32_t time_start;
     52          	time_start=GetMicroTick();
     53          	if(4294967295UL-time_start>time)
     54          	{
     55          	  while(GetMicroTick()-time_start<time){};
     56          	}
     57          	else
     58          	{
     59                    //uint32_t time_rest = time + time_start - 4294967295UL;
     60                    uint32_t time_rest = 4294967295UL - time_start;
     61                    time_rest = time - time_rest ;
     62                    while(time_start<4294967295UL){};
     63                    while(GetMicroTick()<time_rest){};
     64          	}
     65          */
     66          }
     67          
     68          void delay_ms(uint32_t time)
     69          {
     70            for(int i=0; i<1000; i++)
     71            {
     72              //delay_us(time);
     73              for(int a=0; a<50; a++)
     74              {
     75                 nop();
     76                  nop();
     77                   nop();
     78                    nop();
     79                     nop();
     80                      nop(); 
     81              }
     82            }
     83          }

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       7  GetMicroTick
       6  clk_config_16MHz_hsi
       2  delay_isr
      28  delay_ms
       1  delay_us
       1  delay_using_timer1_init

 
 45 bytes in section .far_func.text
 
 45 bytes of CODE memory

Errors: none
Warnings: none
